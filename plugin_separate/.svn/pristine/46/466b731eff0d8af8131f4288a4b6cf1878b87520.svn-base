package plugin_hello_world;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class XMLParser {
	
	
	public static XmlDocument parse(String xml) throws Exception {
		//String xml = "<xml><tag><inner attr=\"val\">tekst</inner><inner2 imie=\"Jan\" nazwisko=\"Kowalski\"/></tag><tag2 name=\"Lisa\">Maria</tag2></xml>";
		//generateDOTGraph(xml);
		long startTime = System.currentTimeMillis();
		Document doc = null;
		{
			DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = fact.newDocumentBuilder();
			//ustawienie zewnetrznego folderu z ktorego ma byc pobierane DTD
			//TODO: w preferencjach projektu ma byc istawiane workingDirectoryURI!!!
			builder.setEntityResolver(
				new EntityResolver() {
					public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
				         if (systemId != null && systemId.startsWith("file:/")) {
					         URI workingDirectoryURI = new File("C:\\Users\\hajdi\\workspace_czysty\\plugin_separate\\dtd").toURI();
					         URI workingFile;
				
				             try {
				            	 URI currentJavaWorkingDirectory = new File(System.getProperty("user.dir")).toURI();
				                 // Construction new File(new URI(String)).toURI() is used to be sure URI has correct representation without redundant '/'
				            	 workingFile = convertToNewWorkingDirectory(currentJavaWorkingDirectory, workingDirectoryURI, new File(new URI(systemId)).toURI());
				            	 return new InputSource(workingFile.toString());
				             } catch (URISyntaxException ex) {
				            	 ex.printStackTrace();
				             }
				         }
				         return null;
					}
				});
			
			InputStream is = new ByteArrayInputStream(xml.getBytes("UTF-8"));
			
			doc = builder.parse(is);
			is.close();
		}
		Map<Integer, List<String>> references = new HashMap<Integer, List<String>>();
		
		XmlDocument xmlDocument = new XmlDocument();
		
		XmlTag tag = DFS(doc, doc.getDocumentElement(), xmlDocument, references);
		System.out.println("Referencje: " + references);
		//xmlDocument.setChilds(tag.getChilds());
		//xmlDocument.setAttributes(tag.getAttributes());
		xmlDocument.setRootElement(tag);
		xmlDocument.setEncoding(doc.getXmlEncoding());
		xmlDocument.setVersion(doc.getXmlVersion());
		
		System.out.println(xmlDocument);
		System.out.println(xmlDocument.toDOTString());
		
		String svg = GraphVizCaller.callGraphViz(xmlDocument.toDOTString());
		
		//SVGParser s = new SVGParser(svg, xmlDocument);
		//s.parse();
		SVGUtil.parseSVG(svg, xmlDocument);
		System.out.println(xmlDocument);
		
		//find edges START
		Map<Integer, Integer> edges = new HashMap<Integer, Integer>();
		
		for (Entry<Integer, List<String>> entry : references.entrySet()) {
			Integer tagId = entry.getKey();
			for (String attrId : entry.getValue()) {
				for (XmlTag xmlTag : xmlDocument.getChilds()) {
					String xmlTagId = null;
					for (Attribute attribute : xmlTag.getAttributes())  {
						if (attribute.getName().equalsIgnoreCase("id")) {
							xmlTagId = attribute.getValue();
							break;
						}
					}
					if (attrId.equals(xmlTagId)) {
						edges.put(tagId, xmlTag.getId());
					}
				}
			}
		}
		System.out.println("edges: " + edges);
		xmlDocument.setEdges(edges);
		
		//find edges END
		
		System.out.println("XMLParser.parse duration: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
		return xmlDocument;
	}
	
	
	public static XmlTag DFS(Document document, Node node, XmlDocument xmlDocument, Map<Integer, List<String>> references) {
		Element element = (Element) node;
		XmlTag tag = new XmlTag();
		tag.setName(node.getNodeName());
		xmlDocument.getChildsMap().put(tag.getId(), tag);
		
		for(int i=0; i<node.getChildNodes().getLength(); ++i){
			int nodeType = node.getChildNodes().item(i).getNodeType();
			if (nodeType == Node.ELEMENT_NODE) {
				tag.getChilds().add(DFS(document, node.getChildNodes().item(i), xmlDocument, references));
			} else if (nodeType == Node.TEXT_NODE) {
				tag.setTextValue(node.getTextContent());
			} 
			/*
			if (node.getAttributes() != null) {
				
				for (Attribute attr : tag.getAttributes()) {
					if ("id".equals(attr.getName())) {
						idAttr = attr.getValue();
					}
					if ("ref".equals(attr.getName())) {
						if (references.containsKey(idAttr)) {
							List<String> targets = references.get(idAttr);
							targets.add(attr.getValue());
						} else {
							List<String> targets = new ArrayList<String>();
							targets.add(attr.getValue());
							references.put(idAttr, targets);
						}
					}
				}
			}*/
		}
		
		buildComponent(tag, element, references);
		return tag;
	}
	
	public static void buildComponent(XmlTag tag, Element element, Map<Integer, List<String>> references) {
		 NamedNodeMap namedNodeMap = element.getAttributes();
		 Integer idAttr = null;
		 for (int i=0; i<namedNodeMap.getLength(); ++i) {
			 tag.getAttributes().add(new Attribute(namedNodeMap.item(i).getNodeName(), namedNodeMap.item(i).getNodeValue()));
			 //Wyszukiwanie referencji
			 //TODO: w przypadku referencji ref="id1,id2" split na podstawie , dorobic!
			 if ("id".equals(namedNodeMap.item(i).getNodeName())) {
				 idAttr = tag.getId();//namedNodeMap.item(i).getNodeValue();
			 }
			 if ("ref".equals(namedNodeMap.item(i).getNodeName())) {
					if (references.containsKey(idAttr)) {
						List<String> targets = references.get(idAttr);
						targets.add(namedNodeMap.item(i).getNodeValue());
					} else {
						List<String> targets = new ArrayList<String>();
						targets.add(namedNodeMap.item(i).getNodeValue());
						references.put(idAttr, targets);
					}
				}
		 }
	}
	
	 private static URI convertToNewWorkingDirectory(URI oldwd, URI newwd, URI file) throws IOException, URISyntaxException {
	        String oldwdStr = oldwd.toString();
	        String newwdStr = newwd.toString();
	        String fileStr = file.toString();
	        
	        String cmpStr = null;
	        // In simpliest case <user.dir>/file.xml - do it faster
	        if (fileStr.startsWith(oldwdStr) && (cmpStr = fileStr.substring(oldwdStr.length())).indexOf('/') == -1) {
	            return new URI(newwdStr + '/' + cmpStr);
	        }
	        
	        String[] oldwdSplit = oldwdStr.split("/");
	        String[] newwdSplit = newwdStr.split("/");
	        String[] fileSplit = fileStr.split("/");
	        
	        int diff;
	        for(diff = 0; diff<oldwdSplit.length & diff<fileSplit.length; diff++) {
	            if (!oldwdSplit[diff].equals(fileSplit[diff])) {
	                break;
	            }
	        }
	        
	        int diffNew;
	        for(diffNew=0; diffNew<newwdSplit.length && diffNew<fileSplit.length; diffNew++) {
	            if (!newwdSplit[diffNew].equals(fileSplit[diffNew])) {
	                break;
	            }
	        }
	        
	        //Workaround for case, when extrnal imported entity has imports other entity
	        //in that case systemId has correct path, not based on user.dir
	        if (diffNew > diff) {
	            return file;
	        }

	        int elemsToSub = oldwdSplit.length - diff;
	        StringBuffer resultStr = new StringBuffer(100);
	        for(int i=0; i<newwdSplit.length - elemsToSub; i++) {
	            resultStr.append(newwdSplit[i]);
	            resultStr.append('/');
	        }
	                
	        for(int i=diff; i<fileSplit.length; i++) {
	            resultStr.append(fileSplit[i]);
	            if (i < fileSplit.length - 1) resultStr.append('/');
	        }
	        
	        return new URI(resultStr.toString());
	    }
}