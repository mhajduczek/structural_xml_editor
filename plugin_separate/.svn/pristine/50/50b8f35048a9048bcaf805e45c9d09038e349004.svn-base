package com.hajduczek.xmleditor;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class SVGParser {
	private String svg;
	private XmlDocument xmlDocument;
	
	public static void main(String[] args) throws Exception {
		SVGParser s = new SVGParser("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><!-- Generated by graphviz version 2.28.0 (20110507.0327) --><!-- Title: G Pages: 1 --><svg width=\"202pt\" height=\"164pt\" viewBox=\"0.00 0.00 202.00 164.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g id=\"graph1\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 160)\"><title>G</title><polygon fill=\"white\" stroke=\"white\" points=\"-4,5 -4,-160 199,-160 199,5 -4,5\"/><g id=\"graph2\" class=\"cluster\"><title>cluster_2</title><polygon fill=\"none\" stroke=\"black\" points=\"0.144865,-0.296263 0.144865,-102.296 130.145,-102.296 130.145,-0.296263 0.144865,-0.296263\"/></g><g id=\"graph3\" class=\"cluster\"><title>cluster_3</title><polygon fill=\"none\" stroke=\"black\" points=\"68.2897,-58.5925 68.2897,-94.5925 122.29,-94.5925 122.29,-58.5925 68.2897,-58.5925\"/></g><g id=\"graph4\" class=\"cluster\"><title>cluster_4</title><polygon fill=\"none\" stroke=\"black\" points=\"8.28973,-8.59253 8.28973,-44.5925 62.2897,-44.5925 62.2897,-8.59253 8.28973,-8.59253\"/></g><g id=\"graph5\" class=\"cluster\"><title>cluster_5</title><polygon fill=\"none\" stroke=\"black\" points=\"140.145,-120.296 140.145,-156.296 194.145,-156.296 194.145,-120.296 140.145,-120.296\"/></g></g></svg>", null);
		s.parse();
	}
	
	public SVGParser(String svg, XmlDocument xmlDocument) {
		this.svg = svg;
		this.xmlDocument = xmlDocument;
	}
	
	public void parse() throws Exception {
		long startTime = System.currentTimeMillis();
		//TODO: pobierz polozenia dla odpowiednich elementow z pliku SVG
		svg = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><!-- Generated by graphviz version 2.28.0 (20110507.0327) --><!-- Title: G Pages: 1 --><svg width=\"202pt\" height=\"164pt\" viewBox=\"0.00 0.00 202.00 164.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g id=\"graph1\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 160)\"><title>G</title><polygon fill=\"white\" stroke=\"white\" points=\"-4,5 -4,-160 199,-160 199,5 -4,5\"/><g id=\"graph2\" class=\"cluster\"><title>cluster_2</title><polygon fill=\"none\" stroke=\"black\" points=\"0.144865,-0.296263 0.144865,-102.296 130.145,-102.296 130.145,-0.296263 0.144865,-0.296263\"/></g><g id=\"graph3\" class=\"cluster\"><title>cluster_3</title><polygon fill=\"none\" stroke=\"black\" points=\"68.2897,-58.5925 68.2897,-94.5925 122.29,-94.5925 122.29,-58.5925 68.2897,-58.5925\"/></g><g id=\"graph4\" class=\"cluster\"><title>cluster_4</title><polygon fill=\"none\" stroke=\"black\" points=\"8.28973,-8.59253 8.28973,-44.5925 62.2897,-44.5925 62.2897,-8.59253 8.28973,-8.59253\"/></g><g id=\"graph5\" class=\"cluster\"><title>cluster_5</title><polygon fill=\"none\" stroke=\"black\" points=\"140.145,-120.296 140.145,-156.296 194.145,-156.296 194.145,-120.296 140.145,-120.296\"/></g></g></svg>";
		DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
		System.out.println("SVGParser.parse1 duration: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
		DocumentBuilder builder = fact.newDocumentBuilder();
		System.out.println("SVGParser.parse2 duration: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
		InputStream is = new ByteArrayInputStream(svg.getBytes("UTF-8"));
		System.out.println("SVGParser.parse3 duration: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
		Document doc = builder.parse(is);
		System.out.println("SVGParser.parse4 duration: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
		DFS(doc, doc.getDocumentElement());
		
	//	System.out.println(xmlDocument);
		//System.out.println(xmlDocument.toDOTString());
		System.out.println("SVGParser.parse finish: " + ((System.currentTimeMillis()-startTime)/1000) + "s");
	}
	
	
	private void DFS(Document document, Node node) {
		Element element = (Element) node;
		if (element.getNodeType() == Node.ELEMENT_NODE && "title".equals(element.getNodeName()) && element.getTextContent().contains("cluster_")) {
			String titleValue = element.getTextContent();
			titleValue = titleValue.replace("cluster_", "");
			int tagId = Integer.parseInt(titleValue);
			System.out.println(tagId);
			Element polygonElement = (Element) element.getNextSibling();
			String allPoints = polygonElement.getAttribute("points");
			
			String[] points = allPoints.split(" ");
			this.xmlDocument.getChildsMap().get(tagId).vertexPosition(
					(int)Double.parseDouble(points[0].split(",")[0]), 
					(int)Double.parseDouble(points[0].split(",")[1]), 
					(int)Double.parseDouble(points[1].split(",")[0]), 
					(int)Double.parseDouble(points[1].split(",")[1]), 
					(int)Double.parseDouble(points[2].split(",")[0]), 
					(int)Double.parseDouble(points[2].split(",")[1]), 
					(int)Double.parseDouble(points[3].split(",")[0]), 
					(int)Double.parseDouble(points[3].split(",")[1]));
		}
			
		for(int i=0; i<node.getChildNodes().getLength(); ++i){
			int nodeType = node.getChildNodes().item(i).getNodeType();
			if (nodeType == Node.ELEMENT_NODE) {
				DFS(document, node.getChildNodes().item(i));
			} 
		}
	}
}
