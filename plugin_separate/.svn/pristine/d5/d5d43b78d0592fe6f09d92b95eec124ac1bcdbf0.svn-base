package com.hajduczek.xmleditor;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class FirstRecipeDOM {
	public static String dotDoc = "";
	public static int x = 0;

	public static String generateDOTGraph(String xml) {
		try {
			DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = fact.newDocumentBuilder();
			
			InputStream is = new ByteArrayInputStream(xml.getBytes("UTF-8"));
			
			Document doc = builder.parse(is);

			Node n = doc.getDocumentElement();
			
			dotDoc = "";
			
			if (n != null) {
				print(n);
			}
			
			dotDoc = "digraph G {\n" + dotDoc + "}";
			
			//System.out.println(dotDoc);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return dotDoc;
	}
//TODO: trzeba obsluzyc takie same nazwy wierzcholkow!! mysle ze dodawanie odpowiedniej ilosci spacji bedzie ok
	static void print(Node node) {
		String textValue = null;
		textValue = node.getTextContent().replaceAll("\t", "");
		textValue = textValue.replaceAll("\n", "");
		if ("".equals(textValue)) {
			return;
		}
		if ("\n".equals(node.getTextContent()) || "\n\t".equals(node.getTextContent())) {
			return;
		}
		
		int type = node.getNodeType();
		
		//NamedNodeMap attr = node.getAttributes();
		//Node refNode = attr.getNamedItem("REF");
		switch (type) {
		case Node.ELEMENT_NODE:
			NodeList children = node.getChildNodes();
			int len = children.getLength();
			
			dotDoc += "subgraph cluster_" + node.getNodeName() + (x++) + " {\nlabel = " + node.getNodeName() + ";\n";
			
			for (int i = 0; i < len; i++) {
				//if (children.item(i).getNodeType() == Node.ELEMENT_NODE) {
					print(children.item(i));
				//}
			}
			
			if (len == 0) {
				//dotDoc += "inner" + (x++) + ";";
			}
			
			dotDoc += "}\n";
			
			break;
		case Node.ENTITY_REFERENCE_NODE:
			//dotDoc += "inner" + (x++) + ";\n";
			break;
		case Node.CDATA_SECTION_NODE:
			//dotDoc += "inner" + (x++) + ";\n";
			break;
		case Node.TEXT_NODE:
			x++;
			dotDoc += "subgraph cluster_txt {\nlabel = \"" + node.getNodeValue() + "\";\n}\n"; //"text_node" + (x++) + ";\n";
			break;
		case Node.PROCESSING_INSTRUCTION_NODE:
			//dotDoc += "inner" + (x++) + ";\n";
			break;
		}
	}
}